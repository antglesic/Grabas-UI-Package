@page "/weather"
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DataGrid TItem="WeatherForecast"
              Items="@forecasts"
              Sortable="true"
              PageSizeOptions="@_pageSizeOptions"
              PageNumber="@_pageNumber"
              PageSize="@_pageSize"
              EnableRowSelection="true"
              MultiSelectionEnabled="true"
              RowSelectionIdentifierProperty="Id"
              SelectedRowItemsChanged="@OnSelectedRowsChanged">
        <GridColumn TItem="WeatherForecast" Property="Date" Caption="Date" />
        <GridColumn TItem="WeatherForecast" Property="TemperatureC" Caption="Temp. (C)" Sortable="true" />
        <GridColumn TItem="WeatherForecast" Property="TemperatureF" Caption="Temp. (F)" Sortable="true" />
        <GridColumn TItem="WeatherForecast" Property="Summary" Caption="Summary" Sortable="true" />
    </DataGrid>

    <DropDown T="WeatherForecast"
              IdentifierProperty="Date"
              DisplayProperty="TemperatureC"
              SearchPlaceHolder="Search for a summary..."
              SelectedItem="@_selectedForecast"
              ValueChanged="OnSelectedRowChanged"
              CanSearch="true"
              Items="@forecasts"
              Width="35%">
    </DropDown>

    <MultiSelect T="WeatherForecast"
                 IdentifierProperty="Date"
                 DisplayProperty="TemperatureC"
                 SearchPlaceHolder="Search..."
                 CanSearch="true"
                 SelectedItems="@_selectedForecasts"
                 ValuesChanged="OnSelectedRowsChanged"
                 Items="@forecasts"
                 Width="35%">
    </MultiSelect>
}

@code {
    private WeatherForecast[]? forecasts;

    private int _pageSize = 5;
    private int _pageNumber = 1;
    private int[] _pageSizeOptions = new int[] { 5, 10, 20 };
    private WeatherForecast? _selectedForecast;
    private IEnumerable<WeatherForecast>? _selectedForecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private void OnSelectedRowChanged(WeatherForecast selectedForecast)
    {
        Console.WriteLine($"Selected forecast: {selectedForecast?.Date.ToShortDateString()}");
        _selectedForecast = selectedForecast;
    }

    private void OnSelectedRowsChanged(IEnumerable<WeatherForecast> selectedForecasts)
    {
        Console.WriteLine($"Selected forecasts: {string.Join(", ", selectedForecasts.Select(f => f.Date.ToShortDateString()))}");
        _selectedForecasts = selectedForecasts;
    }
}
